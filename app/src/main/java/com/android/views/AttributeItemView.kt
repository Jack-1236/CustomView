package com.android.viewsimport android.content.Contextimport android.support.v4.os.IResultReceiver.Defaultimport android.util.AttributeSetimport android.view.LayoutInflaterimport android.view.ViewGroupimport androidx.constraintlayout.widget.ConstraintLayoutimport androidx.databinding.DataBindingUtilimport com.android.custom.views.Rimport com.android.custom.views.databinding.LayoutAttributeitemViewBindingimport com.android.data.AttributeObservable/** * Description : 将组件视为属性项，左侧属性名，右侧属性值 * * Author     : TAN * * Time       : 2023/7/19 15:40 */class AttributeItemView @JvmOverloads constructor(context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0) : ConstraintLayout(context, attrs, defStyleAttr) {    private val binding: LayoutAttributeitemViewBinding by lazy { DataBindingUtil.inflate(LayoutInflater.from(context), R.layout.layout_attributeitem_view, this, true) }    companion object {        private const val FLAG_ATTRIBUTE_NAME = "Attribute Name Flag"        private const val FLAG_ATTRIBUTE_VALUE = "Attribute Value Flag"        /**默认属性名的宽度*/        private const val DEFAULT_ATTRIBUTE_NAME_WIDTH = ViewGroup.LayoutParams.WRAP_CONTENT        /**默认属性值的宽度*/        private const val DEFAULT_ATTRIBUTE_VALUE_WIDTH = ViewGroup.LayoutParams.WRAP_CONTENT        /**默认属性名的高度*/        private const val DEFAULT_ATTRIBUTE_NAME_HEIGHT = ViewGroup.LayoutParams.WRAP_CONTENT        /**默认属性值的高度*/        private const val DEFAULT_ATTRIBUTE_VALUE_HEIGHT = ViewGroup.LayoutParams.WRAP_CONTENT        private val Default_ATTRIBUTE_NAME_BIND = AttributeObservable("", R.color.black, 12, R.style.AttributeStyle_AttributeName, R.color.white)        private val Default_ATTRIBUTE_VALUE_BIND = AttributeObservable("", R.color.black, 10, R.style.AttributeStyle_AttributeValue, R.color.white)    }    var attributeNameWidth: Int = DEFAULT_ATTRIBUTE_NAME_WIDTH        set(width) {            field = width            setTextViewWidth(FLAG_ATTRIBUTE_NAME, width)        }    var attributeNameHeight: Int = DEFAULT_ATTRIBUTE_NAME_HEIGHT        set(height) {            field = height            setTextViewHeight(FLAG_ATTRIBUTE_NAME, height)        }    var attributeValueWidth: Int = DEFAULT_ATTRIBUTE_VALUE_WIDTH        set(width) {            field = width            setTextViewWidth(FLAG_ATTRIBUTE_VALUE, width)        }    var attributeValueHeight: Int = DEFAULT_ATTRIBUTE_VALUE_HEIGHT        set(height) {            field = height            setTextViewHeight(FLAG_ATTRIBUTE_VALUE, height)        }    var attributeNameBind: AttributeObservable? = Default_ATTRIBUTE_NAME_BIND    var attributeValueBind: AttributeObservable? = Default_ATTRIBUTE_VALUE_BIND    init {        parseAttr(attrs)        binding.attributeName = attributeNameBind        binding.attributeValue = attributeValueBind    }    private fun setTextViewWidth(flag: String, width: Int) {        when (flag) {            FLAG_ATTRIBUTE_NAME -> {                val layoutParams = binding.attributeItemText.layoutParams                layoutParams.width = width                binding.attributeItemText.layoutParams = layoutParams            }            else -> {                val layoutParams = binding.attributeItemValue.layoutParams                layoutParams.width = width                binding.attributeItemValue.layoutParams = layoutParams            }        }        requestLayout()    }    private fun setTextViewHeight(flag: String, height: Int) {        when (flag) {            FLAG_ATTRIBUTE_NAME -> {                val layoutParams = binding.attributeItemText.layoutParams                layoutParams.height = height                binding.attributeItemText.layoutParams = layoutParams            }            else -> {                val layoutParams = binding.attributeItemValue.layoutParams                layoutParams.height = height                binding.attributeItemValue.layoutParams = layoutParams            }        }        requestLayout()    }    private fun parseAttr(attrs: AttributeSet?) {        val typedArray = context.obtainStyledAttributes(            attrs, R.styleable.AttributeItemView, 0, 0        )        attributeNameWidth = typedArray.getInteger(R.styleable.AttributeItemView_attributeNameWidth, DEFAULT_ATTRIBUTE_NAME_WIDTH)        attributeNameHeight = typedArray.getInteger(R.styleable.AttributeItemView_attributeNameHeight, DEFAULT_ATTRIBUTE_NAME_HEIGHT)        attributeValueWidth = typedArray.getInteger(R.styleable.AttributeItemView_attributeValueWidth, DEFAULT_ATTRIBUTE_VALUE_WIDTH)        attributeValueHeight = typedArray.getInteger(R.styleable.AttributeItemView_attributeValueHeight, DEFAULT_ATTRIBUTE_VALUE_HEIGHT)        typedArray.recycle()    }}