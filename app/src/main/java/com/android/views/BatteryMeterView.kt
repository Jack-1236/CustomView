package com.android.viewsimport android.content.Contextimport android.graphics.Canvasimport android.graphics.Colorimport android.graphics.Paintimport android.graphics.Rectimport android.graphics.RectFimport android.util.AttributeSetimport android.view.Viewimport androidx.annotation.CheckResultimport androidx.annotation.ColorIntimport androidx.core.content.ContextCompatimport com.android.custom.views.Rimport kotlin.math.roundToInt/** * Description : 电池电量表 * * Author     : TAN * * Time       : 2023/7/18 13:49 */class BatteryMeterView @JvmOverloads constructor(context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0) : View(context, attrs, defStyleAttr) {    companion object {        /** 默认充电状态*/        private const val DEFAULT_CHARGING_STATE = false        /**默认电池电量*/        private const val DEFAULT_BATTERY_LEVEL = 1        /**默认警告级别*/        private const val DEFAULT_WARNING_LEVEL = 20        /**默认电池电量颜色*/        private const val DEFAULT_BATTERY_LEVEL_COLOR = Color.GREEN        /**默认警告颜色*/        private const val DEFAULT_WARNING_COLOR = Color.RED        /**默认背景颜色*/        private const val DEFAULT_BACKGROUND_COLOR = Color.LTGRAY        /**默认电池头颜色*/        private const val DEFAULT_BATTERY_HEAD_COLOR = Color.DKGRAY        /**默认文本颜色*/        private const val DEFAULT_TEXT_COLOR = Color.DKGRAY        /**默认充电颜色*/        private const val DEFAULT_CHARGING_COLOR = Color.DKGRAY        /**文字大小比例*/        private const val TEXT_SIZE_RATIO = 0.5f        /**背景内边距*/        private const val DEFAULT_BACKGROUND_PADDING = 12        /**背景描边偏移量*/        private const val DEFAULT_BACKGROUND_STROKE_OFFSET = 10    }    /**控件的内容高度*/    private var contentHeight = 0    /**控件的内容宽度*/    private var contentWidth = 0    /**电池头部的宽度*/    private var batteryHeadWidth = 0    /**背景形状*/    private val backgroundRect = Rect()    /**背景描边*/    private val backgroundStrokeRect = Rect()    /**电池电量形状*/    private val batteryLevelRect = Rect()    /**电池他形状*/    private val batteryHeadRect = Rect()    /**充电标志形状*/    private val chargingLogoRect = Rect()    /**背景画笔*/    private val backgroundPaint = Paint(Paint.ANTI_ALIAS_FLAG)    /**描边*/    private val backgroundPaintStroke = Paint(Paint.ANTI_ALIAS_FLAG)    /**文本画笔*/    private val textValuePaint = Paint(Paint.ANTI_ALIAS_FLAG)    /**电池头部画笔*/    private val batteryHeadPaint = Paint(Paint.ANTI_ALIAS_FLAG)    /**电池电量画笔*/    private val batteryLevelPaint = Paint(Paint.ANTI_ALIAS_FLAG)    /**电池充电标志画笔*/    private val chargingLogoPaint = Paint(Paint.ANTI_ALIAS_FLAG)    /**电量显示颜色*/    var batteryLevelColor: Int = DEFAULT_BATTERY_LEVEL_COLOR        set(@ColorInt color) {            field = color            batteryLevelPaint.color = color            updateSize(width, height)        }    /**警告电量显示颜色*/    var warningColor: Int = DEFAULT_WARNING_COLOR        set(@ColorInt color) {            field = color            batteryLevelPaint.color = color            updateSize(width, height)        }    /**背景色*/    var backgroundRectColor: Int = DEFAULT_BACKGROUND_COLOR        set(@ColorInt color) {            field = color            backgroundPaint.color = color            updateSize(width, height)        }    /**电池头部颜色*/    var batteryHeaderColor: Int = DEFAULT_BATTERY_HEAD_COLOR        set(@ColorInt color) {            field = color            batteryHeadPaint.color = color            updateSize(width, height)        }    /**充电颜色*/    var chargingColor: Int = DEFAULT_CHARGING_COLOR        set(@ColorInt color) {            field = color            chargingLogoPaint.color = color            updateSize(width, height)        }    /**文本颜色*/    var textColor: Int = DEFAULT_TEXT_COLOR        set(@ColorInt color) {            field = color            textValuePaint.color = color            updateSize(width, height)        }    /**是否在充电状态*/    var isCharging: Boolean = DEFAULT_CHARGING_STATE        @CheckResult        get() = field        set(value) {            field = value            updateSize(width, height)        }    /**电池当前电量*/    var batteryLevel: Int = DEFAULT_BATTERY_LEVEL        @CheckResult        get() = field        set(level) {            field = when {                level > 100 -> 100                level < 0 -> 0                else -> level            }            if (field <= DEFAULT_WARNING_LEVEL) {                batteryLevelPaint.color = warningColor            } else {                batteryLevelPaint.color = batteryLevelColor            }            updateSize(width, height)        }    init {        parseAttr(attrs)        batteryLevelPaint.apply {            style = Paint.Style.FILL            color = batteryLevelColor        }        backgroundPaint.apply {            style = Paint.Style.FILL            color = backgroundRectColor        }        backgroundPaintStroke.apply {            style = Paint.Style.STROKE            strokeWidth = 15F            color = Color.BLACK        }        batteryHeadPaint.apply {            style = Paint.Style.FILL            color = batteryHeaderColor        }        chargingLogoPaint.apply {            style = Paint.Style.FILL_AND_STROKE            color = chargingColor            strokeWidth = 5f        }        textValuePaint.apply {            textAlign = Paint.Align.CENTER            color = textColor        }    }    override fun onSizeChanged(width: Int, height: Int, oldw: Int, oldh: Int) {        updateSize(width, height)    }    override fun onDraw(canvas: Canvas) {        drawBackground(canvas)        drawBatteryHead(canvas)        drawBatteryLevel(canvas)        if (isCharging) {            drawChargingLogo(canvas)        } else {            drawCurrentBatteryValueText(canvas)        }    }    private fun updateSize(width: Int, height: Int) {        contentWidth = width - paddingStart - paddingEnd        contentHeight = height - paddingTop - paddingBottom        textValuePaint.textSize = contentHeight * TEXT_SIZE_RATIO        batteryHeadWidth = (contentWidth / 10) / 2        backgroundStrokeRect.set(            DEFAULT_BACKGROUND_STROKE_OFFSET,            DEFAULT_BACKGROUND_STROKE_OFFSET,            contentWidth - (DEFAULT_BACKGROUND_STROKE_OFFSET + batteryHeadWidth + DEFAULT_BACKGROUND_PADDING),            contentHeight - DEFAULT_BACKGROUND_STROKE_OFFSET        )        backgroundRect.set(            backgroundStrokeRect.left + DEFAULT_BACKGROUND_PADDING,            backgroundStrokeRect.top + DEFAULT_BACKGROUND_PADDING,            backgroundStrokeRect.right - DEFAULT_BACKGROUND_PADDING,            backgroundStrokeRect.bottom - DEFAULT_BACKGROUND_PADDING        )        batteryHeadRect.set(            backgroundStrokeRect.right + DEFAULT_BACKGROUND_PADDING,            backgroundRect.top + ((contentHeight - ((contentHeight - backgroundRect.bottom) + backgroundRect.top)) / 10f).roundToInt(),            backgroundRect.left + 5 + backgroundRect.right + batteryHeadWidth,            backgroundRect.top + (((contentHeight - ((contentHeight - backgroundRect.bottom) + backgroundRect.top)) / 10f) * 9).roundToInt()        )        batteryLevelRect.set(            backgroundRect.left,            backgroundRect.top,            backgroundRect.left + ((batteryLevel * ((backgroundRect.right - backgroundRect.left).toDouble() / 100.toDouble()))).roundToInt(),            backgroundRect.top + (backgroundRect.bottom - backgroundRect.top)        )        //计算中心坐标        val rectCenterX = (backgroundRect.right - backgroundRect.left) / 2        val rectCenterY = (backgroundRect.bottom - backgroundRect.top) / 2        val logoSize = (rectCenterX + rectCenterY) / 2        chargingLogoRect.set(            backgroundRect.left + rectCenterX - logoSize / 2,            backgroundRect.top + rectCenterY - logoSize / 2,            backgroundRect.left + rectCenterX + logoSize / 2,            backgroundRect.top + rectCenterY + logoSize / 2        )        invalidate()    }    /**     * 绘制充电背景和充电描边*/    private fun drawBackground(canvas: Canvas) {        canvas.drawRoundRect(RectF(backgroundRect), 7f, 7f, backgroundPaint)        canvas.drawRoundRect(RectF(backgroundStrokeRect), 10f, 10f, backgroundPaintStroke)    }    /**绘制充电头*/    private fun drawBatteryHead(canvas: Canvas) {        canvas.drawRoundRect(RectF(batteryHeadRect), 7f, 7f, batteryHeadPaint)    }    /**绘制电量*/    private fun drawBatteryLevel(canvas: Canvas) {        if (batteryLevel <= DEFAULT_WARNING_LEVEL) {            batteryLevelPaint.color = warningColor        } else {            batteryLevelPaint.color = batteryLevelColor        }        canvas.drawRoundRect(RectF(batteryLevelRect), 7f, 7f, batteryLevelPaint)    }    /**绘制充电标志*/    private fun drawChargingLogo(canvas: Canvas) {        val logoDrawable = ContextCompat.getDrawable(context, R.drawable.ic_charging_bolt)        logoDrawable?.bounds = chargingLogoRect        logoDrawable?.colorFilter = chargingLogoPaint.colorFilter        logoDrawable?.draw(canvas)    }    /**绘制电量文本*/    private fun drawCurrentBatteryValueText(canvas: Canvas) {        val text = if (batteryLevel == 0) "0" else batteryLevel.toString()        canvas.drawText(            text,            (contentWidth * 0.45).toFloat(),            (contentHeight * 0.7).toFloat(),            textValuePaint        )    }    private fun parseAttr(attrs: AttributeSet?) {        val typedArray = context.obtainStyledAttributes(            attrs, R.styleable.BatteryMeterView, 0, 0        )        isCharging = typedArray.getBoolean(            R.styleable.BatteryMeterView_charging,            DEFAULT_CHARGING_STATE        )        batteryLevel = typedArray.getInteger(            R.styleable.BatteryMeterView_battery_level,            DEFAULT_BATTERY_LEVEL        )        batteryLevelColor = typedArray.getColor(            R.styleable.BatteryMeterView_normal_fill_color,            DEFAULT_BATTERY_LEVEL_COLOR        )        backgroundRectColor = typedArray.getColor(            R.styleable.BatteryMeterView_background_fill_color,            DEFAULT_BACKGROUND_COLOR        )        warningColor = typedArray.getColor(            R.styleable.BatteryMeterView_warning_fill_color,            DEFAULT_WARNING_COLOR        )        batteryHeaderColor = typedArray.getColor(            R.styleable.BatteryMeterView_battery_head_color,            DEFAULT_BATTERY_HEAD_COLOR        )        chargingColor = typedArray.getColor(            R.styleable.BatteryMeterView_charging_color,            DEFAULT_CHARGING_COLOR        )        textColor = typedArray.getColor(            R.styleable.BatteryMeterView_text_color,            DEFAULT_TEXT_COLOR        )        typedArray.recycle()    }}