package com.android.viewsimport android.content.Contextimport android.graphics.Canvasimport android.graphics.Colorimport android.graphics.Paintimport android.graphics.Rectimport android.graphics.RectFimport android.util.AttributeSetimport android.view.Viewimport androidx.core.view.ContentInfoCompat.Flagsimport kotlin.math.cosimport kotlin.math.minimport kotlin.math.sinimport kotlin.math.sqrtclass SportsView(private val context: Context, private val attrs: AttributeSet?, private val def: Int) : View(context, attrs, def) {    companion object {        private const val DEFAULT_PROGRESS_COLOR = Color.RED        private const val DEFAULT_PROGRESS_STROKE_WIDTH = 20F        private const val DEFAULT_PROGRESS_VALUE = 30f    }    private val progressPaint: Paint = Paint(Paint.ANTI_ALIAS_FLAG)    private val progressRect: RectF = RectF()    val progressColor: Int = DEFAULT_PROGRESS_COLOR    val progressStrokeWidth: Float = DEFAULT_PROGRESS_STROKE_WIDTH    val startAngle: Float = 90f    var progressValue = DEFAULT_PROGRESS_VALUE        set(value) {            field = value            invalidate()        }    init {        progressPaint.apply {            color = progressColor            strokeWidth = progressStrokeWidth            style = Paint.Style.STROKE        }    }    override fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {        super.onSizeChanged(w, h, oldw, oldh)        val circleSize = calculateEnclosingRectangleWidthAndHeight(            width = (w -paddingStart-paddingEnd).toInt(), height = (h -paddingTop-paddingBottom).toInt()        )        progressRect.set(circleSize)    }    override fun onDraw(canvas: Canvas?) {        super.onDraw(canvas)        canvas?.drawArc(progressRect, startAngle, progressValue * (360f / 100f), false, progressPaint)        //   canvas?.drawRect(progressRect, progressPaint)    }    /**     * Description : 根据特定的角度计算起始点和结束点     *     * Author     : TAN     *     * Time       : 2023/7/20 17:28     * @param width 控件宽度     * @param height 控件高度     */    private fun calculateEnclosingRectangleWidthAndHeight(width: Int, height: Int): RectF {        //圆心点坐标        val cx = (width / 2f)-30f        val cy = (height / 2f)-30f        val r = (if (width > height) height else width) / 2f - 30f        //  return RectF(x1.toFloat(), y1.toFloat(), x2.toFloat(), y2.toFloat())        return RectF(cx - r, cy - r, cx + r, cy + r)    }    fun setTestProgressValue(value: Float) {        progressValue = value    }}